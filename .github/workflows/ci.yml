# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  tf_version: 'latest'
  tf_working_dir: 'terraform'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.version}}
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Setting up the OpenMRS sdk
        run: echo "n" | mvn org.openmrs.maven.plugins:openmrs-sdk-maven-plugin:setup-sdk

      - name: Building distro
        run: ./build-docker-image-for-distro.sh

      - name: Set version as output
        id: version
        run: echo "::set-output name=version::$(./get-version.sh)"

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

  deploy-to-ecs:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    needs: build
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: 'Terraform Init'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: ${{ env.tf_version }}
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: ${{ env.tf_working_dir }}
        tf_actions_comment: false

    - name: Test output
      run: echo "${{ needs.build.outputs.version }}"

    - name: 'Terraform Apply'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: ${{ env.tf_version }}
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: ${{ env.tf_working_dir }}
        tf_actions_comment: false
      env:
        TF_VAR_opengp_version: ${{ needs.build.outputs.version }}
